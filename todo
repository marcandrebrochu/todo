#!/bin/sh

# This script uses files stored in a 'database' (a simple directory). Each file
# represents a todo item. The content of each file is data associated with the
# todo item (for instance the state of the item, a deadline, etc).
#
# The filename of a todo item is irrelevant, the only requirement is that it
# must be unique amongst all other files in the database. This means the title
# of the task is stored in the file, easily dealing with titles containing
# spaces and basically any unicode code point.
#
# The contents of each item is as follows:
# <name>

# By order of priority, the path to the database is set to $TODO_DB, then to a
# subdir of $XDG_DATA_HOME, or if neither of these vars are set, $HOME/.todo
if [ $TODO_DB ]; then
  db="$TODO_DB"
elif [ $XDG_DATA_HOME ]; then
  db="$XDG_DATA_HOME/todo"
else
  db="$HOME/.todo"
fi
idfile="$db/id"

# If they do not exist, create the database directory and the ID file.
mkdir -p "$db"
if [ ! -f "$idfile" ]; then
  echo 0 > "$idfile"
fi

get_new_id() {
  current_id=$(cat $idfile)
  new_id=$(expr $current_id + 1)
  echo $new_id > "$idfile"
  return $new_id
}

go_ls() {
  for item in $(ls "$db"); do
    item_path="$db/$item"
    if [ "$item_path" = "$idfile" ]; then
      continue
    fi
    if [ -f "$item_path/done" ]; then
      item_state="X"
    else
      item_state="."
    fi
    item_title=$(cat "$item_path/title")
    printf '%s%s\t%s\n' $item "$item_state" "$item_title"
  done
}

go_add() {
  item_name="$1"
  if [ -z "$item_name" ]; then
    echo "usage: $0 add name"
    exit 1
  fi
  get_new_id
  item_id=$?
  item_path="$db/$item_id"
  mkdir "$item_path"
  echo "$item_name" > "$item_path/title"
  echo $item_id
}

go_toggle() {
  item_id=$1
  if [ -z $item_id ]; then
    echo "usage: $0 toggle id"
    exit 1
  fi
  item_path="$db/$item_id"
  if [ ! -d "$item_path" ]; then
    echo "item does not exist!"
    exit 2
  fi
  if [ ! -f "$item_path/done" ]; then
    touch "$item_path/done"
  else
    rm "$item_path/done"
  fi
}

go_delete() {
  item_id=$1
  if [ -z $item_id ]; then
    echo "usage: $0 delete id"
    exit 1
  fi
  item_path="$db/$item_id"
  if [ ! -d "$item_path" ]; then
    echo "item does not exist!"
    exit 2
  fi
  item_title=$(cat "$item_path/title")
  echo "$item_title"
  while [ "$confirm" != 'y' ] || [ "$confirm" != 'n' ]; do
    read -p 'remove? [y/N] ' confirm
    case "$confirm" in
      [Yy])
        rm -fr "$item_path"
        break;;
      [Nn]|'') exit 0;;
    esac
  done
}

# The first command-line argument should be one of: ls, add, toggle, delete
# Only the first letter of each argument is checked. If no such arguments are
# given, assume 'ls' to list all tasks.
case $1 in
  l*)
    shift
    go_ls $@;;
  a*)
    shift
    go_add "$@";;
  t*)
    shift
    go_toggle $@;;
  d*)
    shift
    go_delete $@;;
  -h|--help)
    echo "usage: $0 [ls|add|toggle|delete]"
    echo "       $0 -h|--help"
    echo "       $0 -r|--reset-id"
    exit 1;;
  -r|--reset-id)
    echo 0 > "$idfile"
    ;;
  *)
    go_ls $@;;
esac
